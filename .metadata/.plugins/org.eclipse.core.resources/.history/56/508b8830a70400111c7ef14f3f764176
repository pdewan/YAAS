package nodes;

import common.Util;

import bus.uigen.shapes.ALineModel;
import bus.uigen.shapes.SimpleShape;

public abstract class AnAbstractLinearElement extends
		AVisualizerElementSkeleton implements VisualizerElement, LinearElement {

	public AnAbstractLinearElement(SimpleShape _s, Object _o,
			ALineModel _l, ALineModel _l2) {

		super(_s, _o, _l, _l2);
	}

	/**************
	 * Position Methods // * @throws NullParentException
	 **************************************/
	public void focusPosition(VisualizerElement parent) {

		for (VisualizerElement node : parent.getVector()) {

			VisualizerElement previousChild = node.getPreviousChild();

			if (null == previousChild) {
				previousChild = parent; // only for spacing; we do not set
				// previousChild to be the parent
			} else if (!previousChild.getVector().isEmpty()) {
				previousChild = previousChild.getVector().get(
						previousChild.getVector().size() - 1);
			}

			// node is offset from parent
			// we do not add parent.width because the x-coordinates of shapes
			// can overlap as long as the y-coordinates do not
			Util
					.move(
							node,
							(parent.getX() + elementShapeXOffset),
							(int) (previousChild.getY()
									+ previousChild.getHeight() + elementShapeYOffset), animate);

			// if the node has children position them before other nodes
			if (node.getVector().size() > 0) {

				focusPosition(node);
				positionVerticalLine(node);
			}
			// if the node is not a root it is connected to a parent
			if (!(node instanceof ALinearRoot))
				positionHorizontalLine(node, horizontalLineYOffset);
		}
	}

	protected void positionVerticalLine(VisualizerElement node) {

		// mask instance variable 'verticalLine'
		ALineModel verticalLine = node.getVerticalLine();

		Util.move(verticalLine, node.getX() + verticalLineXOffset, node.getY()
				+ node.getHeight(), animate);

		verticalLine.setWidth(0);

		VisualizerElement lastChild = node.getVector().get(
				node.getVector().size() - 1);
		verticalLine.setHeight(lastChild.getY() - node.getY()
				- lastChild.getHeight() / 2);
	}

	protected void positionHorizontalLine(LinearElement node,
			double horizontalLineYOffset) {

		// mask instance variable 'horizontalLine'
		ALineModel horizontalLine = node.getHorizontalLine();

		Util.move(horizontalLine, node.getParent().getX()
				+ node.getParent().getWidth() / 2,
				(int) (node.getY() + horizontalLineYOffset), animate);

		horizontalLine.setHeight(0);
		horizontalLine.setWidth(node.getX() - node.getParent().getX()
				- node.getParent().getWidth() / 2);
	}
}
