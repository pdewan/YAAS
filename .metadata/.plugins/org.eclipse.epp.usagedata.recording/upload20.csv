what,kind,bundleId,bundleVersion,description,time
error,log,,,"Error in JDT Core during reconcile",1319228623554
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.edit.paste",1319228624552
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.file.save",1319228625301
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1319228625972
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage collection.visualizers;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport common.HashMapManipulator;\r\n\r\nimport nodes.VisualizerElement;\r\n\r\nimport wdh.pgm.cv.iface.*;\r\n\r\nimport bus.uigen.shapes.LabelShape;\r\nimport bus.uigen.shapes.SimpleShape;\r\nimport bus.uigen.shapes.TextShape;\r\n\r\nimport shapes.AShapeFactory;\r\nimport shapes.ShapeFactory;\r\nimport util.models.AListenableVector;\r\nimport util.models.ListenableVector;\r\n\r\npublic abstract class ACollectionVisualizer<T> extends AListenableVector<G>\r\n\t\timplements CollectionVisualizer<T> {\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1701393485380127014L;\r\n\tprotected int internalIndex, collectionIndex;\r\n\tprotected int animationPauseTime, animationStep;\r\n\tprotected int boxWidth, boxHeight;\r\n\tprotected double magAmount;\r\n\tprotected boolean alignVertical, canProceed, dynamicWidth, dynamicHeight;\r\n\tprotected ListenableVector<T> input;\r\n\tprotected ShapeFactory factory;\r\n\tprotected HashMap<Integer, ListenableVector<T>> bufferVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected HashMap<Integer, ListenableVector<T>> originalVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected int horizontalSpacing, verticalSpacing;\r\n\tprotected Control controller = new AController(this);\r\n\tprotected UndoerInterface ui;\r\n\r\n\t/********************* Constructor ********************************/\r\n\tprotected ACollectionVisualizer(SimpleShape representation) {\r\n\t\tanimationPauseTime = 5;\r\n\t\tanimationStep = 1;\r\n\t\tinternalIndex = 0;\r\n\t\tcollectionIndex = 0;\r\n\t\tmagAmount = 1;\r\n\t\tboxWidth = 100;\r\n\t\tboxHeight = 20;\r\n\t\thorizontalSpacing = 10;\r\n\t\tverticalSpacing = 10;\r\n\t\tfactory = new AShapeFactory(representation);\r\n\t}\r\n\r\n\t/********************* Concurrent Functions ********************************/\r\n\tpublic void changeAnimationPauseTime(int newTime) {\r\n\t\tanimationPauseTime = newTime;\r\n\t}\r\n\r\n\tpublic synchronized void waitForNextBufferThreadStep() {\r\n\t\ttry {\r\n\t\t\tthis.wait();\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synchronized void notifyVisualizer() {\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\tpublic synchronized void setCanProceed(boolean b) {\r\n\t\tcanProceed = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicWidth(boolean b) {\r\n\t\tdynamicWidth = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicHeight(boolean b) {\r\n\t\tdynamicHeight = b;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic synchronized boolean getCanProceed() {\r\n\t\treturn canProceed;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic int getAnimationPauseTime() {\r\n\t\treturn animationPauseTime;\r\n\t}\r\n\r\n\tpublic void setAnimationPauseTime(int newVal) {\r\n\t\tanimationPauseTime = newVal;\r\n\t}\r\n\r\n\t/******************* Graphics Options **************************/\r\n\r\n\tpublic void alignVertical(boolean b) {\r\n\t\talignVertical = b;\r\n\t}\r\n\r\n\tpublic boolean retrieveAlignment() {\r\n\t\treturn alignVertical;\r\n\t}\r\n\r\n\tpublic synchronized void visualize(ListenableVector vector) {\r\n\t\tListeningListenableVector buffer = new ABufferCollection(vector, this);\r\n\t\toriginalVectors.put(collectionIndex, vector);\r\n\t\tbuffer.addVectorMethodsListener(this);\r\n\r\n\t\t((Buffer) buffer).getUndoer().getCommands().addVectorMethodsListener(\r\n\t\t\t\t(Controller)getController());\r\n\t\tui = ((Buffer) buffer).getUndoer();\r\n\r\n\t\tvisualizeBuffer(buffer);\r\n\t\t((Buffer) buffer).putBufferThread(this, controller);\r\n\t}\r\n\r\n\tprivate synchronized void visualizeBuffer(ListenableVector vector) {\r\n\t\tbufferVectors.put(collectionIndex, (ABufferCollection) vector);\r\n\r\n\t\tadd(displayVector(vector, HashMapManipulator.key(bufferVectors, vector)));\r\n\t\tcollectionIndex++;\r\n\t}\r\n\r\n\tprotected abstract ListenableVector displayVector(ListenableVector vector,\r\n\t\t\tint colNum);\r\n\r\n\tprotected SimpleShape createShape(String string, int x, int y) {\r\n\t\tSimpleShape shape = factory.create();\r\n\t\tshape.setX(x);\r\n\t\tshape.setY(y);\r\n\r\n\t\ttry {\r\n\t\t\tdouble shapeStretchFactor = Double.parseDouble(string);\r\n\t\t\tshape.setWidth((int) (boxWidth * (dynamicWidth ? shapeStretchFactor\r\n\t\t\t\t\t: 1)));\r\n\t\t\tshape\r\n\t\t\t\t\t.setHeight((int) (boxHeight * (dynamicHeight ? shapeStretchFactor\r\n\t\t\t\t\t\t\t: 1)));\r\n\t\t} catch (Exception e) {\r\n\t\t\tshape.setWidth((int) (boxWidth));\r\n\t\t\tshape.setHeight((int) (boxHeight));\r\n\r\n\t\t}\r\n\r\n\t\tif (shape instanceof TextShape)\r\n\t\t\t((TextShape) shape).setText(string);\r\n\t\tif (shape instanceof LabelShape)\r\n\t\t\t((LabelShape) shape).setText(string);\r\n\r\n\t\treturn shape;\r\n\t}\r\n\r\n\t/*protected SimpleShape addModel(int index, Object arg1, int x, int y) {\r\n\t\tSimpleShape shape = createShape(arg1.toString(), x, y);\r\n\t\telementAt(index).add(shape);\r\n\t\treturn shape;\r\n\t}*/\r\n\r\n\t// This method moves an entire list of shapes to\r\n\t// (shapes.get(i).getX()+x,shapes.get(i).getY()+y)\r\n\tprotected synchronized void move(List<VisualizerElement> shapes, int x,\r\n\t\t\tint y) {\r\n\t\tmoveHorizontally(shapes, x);\r\n\t\tmoveVertically(shapes, y);\r\n\t}\r\n\r\n\t// This method moves one shape to the position (x,y)\r\n\tprotected synchronized void move(SimpleShape shape, int x, int y) {\r\n\t\tmoveHorizontally(shape, x);\r\n\t\tmoveVertically(shape, y);\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(List<VisualizerElement> shapes,\r\n\t\t\tint theY) {\r\n\t\tboolean positive = theY > 0;\r\n\t\ttry {\r\n\t\t\tint current_y_position = 0;\r\n\t\t\twhile (current_y_position != Math.abs(theY)) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveVertically(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveVertically(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_y_position += animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(\r\n\t\t\tList<VisualizerElement> shapes, int x) {\r\n\t\tboolean positive = x > 0;\r\n\t\ttry {\r\n\t\t\tint current_x_position = 0;\r\n\t\t\twhile (current_x_position != x) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveHorizontally(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveHorizontally(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_x_position = current_x_position + animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(SimpleShape model, int x) {\r\n\t\tboolean test = x > model.getX();\r\n\t\tint move = x - model.getX();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble newX = model.getX() + animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble newX = model.getX() - animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(SimpleShape model, int y) {\r\n\t\tboolean test = y > model.getY();\r\n\t\tint move = y - model.getY();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tThread.sleep(animationPauseTime);\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() + animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() - animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/************************** Access Methods ***************************************/\r\n\tpublic HashMap<Integer, ListenableVector<T>> retrieveOriginalVectors() {\r\n\t\treturn originalVectors;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic Control getController() {\r\n\t\treturn controller;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic UndoerInterface getUndoer() {\r\n\r\n\t\treturn ui;\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1319228626643
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1319228626658
error,log,,,"Error in JDT Core during reconcile",1319228626674
activated,view,org.eclipse.jdt.ui,3.5.2.r352_v20100106-0800,"org.eclipse.jdt.ui.PackageExplorer",1319228634324
opened,editor,org.eclipse.jdt.ui,3.5.2.r352_v20100106-0800,"org.eclipse.jdt.ui.CompilationUnitEditor",1319228634480
activated,editor,org.eclipse.jdt.ui,3.5.2.r352_v20100106-0800,"org.eclipse.jdt.ui.CompilationUnitEditor",1319228634496
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.file.save",1319228640695
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1319228641538
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage collection.visualizers;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport common.HashMapManipulator;\r\n\r\nimport nodes.VisualizerElement;\r\n\r\nimport wdh.pgm.cv.iface.*;\r\n\r\nimport bus.uigen.shapes.LabelShape;\r\nimport bus.uigen.shapes.SimpleShape;\r\nimport bus.uigen.shapes.TextShape;\r\n\r\nimport shapes.AShapeFactory;\r\nimport shapes.ShapeFactory;\r\nimport util.models.AListenableVector;\r\nimport util.models.ListenableVector;\r\n\r\npublic abstract class ACollectionVisualizer<T> extends AListenableVector<G>\r\n\t\timplements CollectionVisualizer<T> {\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1701393485380127014L;\r\n\tprotected int internalIndex, collectionIndex;\r\n\tprotected int animationPauseTime, animationStep;\r\n\tprotected int boxWidth, boxHeight;\r\n\tprotected double magAmount;\r\n\tprotected boolean alignVertical, canProceed, dynamicWidth, dynamicHeight;\r\n\tprotected ListenableVector<T> input;\r\n\tprotected ShapeFactory factory;\r\n\tprotected HashMap<Integer, ListenableVector<T>> bufferVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected HashMap<Integer, ListenableVector<T>> originalVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected int horizontalSpacing, verticalSpacing;\r\n\tprotected Control controller = new AController(this);\r\n\tprotected UndoerInterface ui;\r\n\r\n\t/********************* Constructor ********************************/\r\n\tprotected ACollectionVisualizer(SimpleShape representation) {\r\n\t\tanimationPauseTime = 5;\r\n\t\tanimationStep = 1;\r\n\t\tinternalIndex = 0;\r\n\t\tcollectionIndex = 0;\r\n\t\tmagAmount = 1;\r\n\t\tboxWidth = 100;\r\n\t\tboxHeight = 20;\r\n\t\thorizontalSpacing = 10;\r\n\t\tverticalSpacing = 10;\r\n\t\tfactory = new AShapeFactory(representation);\r\n\t}\r\n\r\n\t/********************* Concurrent Functions ********************************/\r\n\tpublic void changeAnimationPauseTime(int newTime) {\r\n\t\tanimationPauseTime = newTime;\r\n\t}\r\n\r\n\tpublic synchronized void waitForNextBufferThreadStep() {\r\n\t\ttry {\r\n\t\t\tthis.wait();\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synchronized void notifyVisualizer() {\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\tpublic synchronized void setCanProceed(boolean b) {\r\n\t\tcanProceed = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicWidth(boolean b) {\r\n\t\tdynamicWidth = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicHeight(boolean b) {\r\n\t\tdynamicHeight = b;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic synchronized boolean getCanProceed() {\r\n\t\treturn canProceed;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic int getAnimationPauseTime() {\r\n\t\treturn animationPauseTime;\r\n\t}\r\n\r\n\tpublic void setAnimationPauseTime(int newVal) {\r\n\t\tanimationPauseTime = newVal;\r\n\t}\r\n\r\n\t/******************* Graphics Options **************************/\r\n\r\n\tpublic void alignVertical(boolean b) {\r\n\t\talignVertical = b;\r\n\t}\r\n\r\n\tpublic boolean retrieveAlignment() {\r\n\t\treturn alignVertical;\r\n\t}\r\n\r\n\tpublic synchronized void visualize(ListenableVector vector) {\r\n\t\tListeningListenableVector buffer = new ABufferCollection(vector, this);\r\n\t\toriginalVectors.put(collectionIndex, vector);\r\n\t\tbuffer.addVectorMethodsListener(this);\r\n\r\n\t\t((Buffer) buffer).getUndoer().getCommands().addVectorMethodsListener(\r\n\t\t\t\t(Controller)getController());\r\n\t\tui = ((Buffer) buffer).getUndoer();\r\n\r\n\t\tvisualizeBuffer(buffer);\r\n\t\t((Buffer) buffer).putBufferThread(this, controller);\r\n\t}\r\n\r\n\tprivate synchronized void visualizeBuffer(ListenableVector vector) {\r\n\t\tbufferVectors.put(collectionIndex, (ABufferCollection) vector);\r\n\r\n\t\tadd(displayVector(vector, HashMapManipulator.key(bufferVectors, vector)));\r\n\t\tcollectionIndex++;\r\n\t}\r\n\r\n\tprotected abstract ListenableVector displayVector(ListenableVector vector,\r\n\t\t\tint colNum);\r\n\r\n\tprotected SimpleShape createShape(String string, int x, int y) {\r\n\t\tSimpleShape shape = factory.create();\r\n\t\tshape.setX(x);\r\n\t\tshape.setY(y);\r\n\r\n\t\ttry {\r\n\t\t\tdouble shapeStretchFactor = Double.parseDouble(string);\r\n\t\t\tshape.setWidth((int) (boxWidth * (dynamicWidth ? shapeStretchFactor\r\n\t\t\t\t\t: 1)));\r\n\t\t\tshape\r\n\t\t\t\t\t.setHeight((int) (boxHeight * (dynamicHeight ? shapeStretchFactor\r\n\t\t\t\t\t\t\t: 1)));\r\n\t\t} catch (Exception e) {\r\n\t\t\tshape.setWidth((int) (boxWidth));\r\n\t\t\tshape.setHeight((int) (boxHeight));\r\n\r\n\t\t}\r\n\r\n\t\tif (shape instanceof TextShape)\r\n\t\t\t((TextShape) shape).setText(string);\r\n\t\tif (shape instanceof LabelShape)\r\n\t\t\t((LabelShape) shape).setText(string);\r\n\r\n\t\treturn shape;\r\n\t}\r\n\r\n\t/*protected SimpleShape addModel(int index, Object arg1, int x, int y) {\r\n\t\tSimpleShape shape = createShape(arg1.toString(), x, y);\r\n\t\telementAt(index).add(shape);\r\n\t\treturn shape;\r\n\t}*/\r\n\r\n\t// This method moves an entire list of shapes to\r\n\t// (shapes.get(i).getX()+x,shapes.get(i).getY()+y)\r\n\tprotected synchronized void move(List<VisualizerElement> shapes, int x,\r\n\t\t\tint y) {\r\n\t\tmoveHorizontally(shapes, x);\r\n\t\tmoveVertically(shapes, y);\r\n\t}\r\n\r\n\t// This method moves one shape to the position (x,y)\r\n\tprotected synchronized void move(SimpleShape shape, int x, int y) {\r\n\t\tmoveHorizontally(shape, x);\r\n\t\tmoveVertically(shape, y);\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(List<VisualizerElement> shapes,\r\n\t\t\tint theY) {\r\n\t\tboolean positive = theY > 0;\r\n\t\ttry {\r\n\t\t\tint current_y_position = 0;\r\n\t\t\twhile (current_y_position != Math.abs(theY)) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveVertically(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveVertically(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_y_position += animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(\r\n\t\t\tList<VisualizerElement> shapes, int x) {\r\n\t\tboolean positive = x > 0;\r\n\t\ttry {\r\n\t\t\tint current_x_position = 0;\r\n\t\t\twhile (current_x_position != x) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveHorizontally(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveHorizontally(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_x_position = current_x_position + animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(SimpleShape model, int x) {\r\n\t\tboolean test = x > model.getX();\r\n\t\tint move = x - model.getX();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble newX = model.getX() + animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble newX = model.getX() - animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(SimpleShape model, int y) {\r\n\t\tboolean test = y > model.getY();\r\n\t\tint move = y - model.getY();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tThread.sleep(animationPauseTime);\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() + animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() - animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/************************** Access Methods ***************************************/\r\n\tpublic HashMap<Integer, ListenableVector<T>> retrieveOriginalVectors() {\r\n\t\treturn originalVectors;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic Control getController() {\r\n\t\treturn controller;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic UndoerInterface getUndoer() {\r\n\r\n\t\treturn ui;\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1319228642583
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1319228642598
error,log,,,"Error in JDT Core during reconcile",1319228642614
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.edit.copy",1319228647803
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.edit.paste",1319228649363
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.file.save",1319228650392
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1319228651001
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage collection.visualizers;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport common.HashMapManipulator;\r\n\r\nimport nodes.VisualizerElement;\r\n\r\nimport wdh.pgm.cv.iface.*;\r\n\r\nimport bus.uigen.shapes.LabelShape;\r\nimport bus.uigen.shapes.SimpleShape;\r\nimport bus.uigen.shapes.TextShape;\r\n\r\nimport shapes.AShapeFactory;\r\nimport shapes.ShapeFactory;\r\nimport util.models.AListenableVector;\r\nimport util.models.ListenableVector;\r\n\r\npublic abstract class ACollectionVisualizer<T> extends AListenableVector<G>\r\n\t\timplements CollectionVisualizer<T> {\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1701393485380127014L;\r\n\tprotected int internalIndex, collectionIndex;\r\n\tprotected int animationPauseTime, animationStep;\r\n\tprotected int boxWidth, boxHeight;\r\n\tprotected double magAmount;\r\n\tprotected boolean alignVertical, canProceed, dynamicWidth, dynamicHeight;\r\n\tprotected ListenableVector<T> input;\r\n\tprotected ShapeFactory factory;\r\n\tprotected HashMap<Integer, ListenableVector<T>> bufferVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected HashMap<Integer, ListenableVector<T>> originalVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected int horizontalSpacing, verticalSpacing;\r\n\tprotected Control controller = new AController(this);\r\n\tprotected UndoerInterface ui;\r\n\r\n\t/********************* Constructor ********************************/\r\n\tprotected ACollectionVisualizer(SimpleShape representation) {\r\n\t\tanimationPauseTime = 5;\r\n\t\tanimationStep = 1;\r\n\t\tinternalIndex = 0;\r\n\t\tcollectionIndex = 0;\r\n\t\tmagAmount = 1;\r\n\t\tboxWidth = 100;\r\n\t\tboxHeight = 20;\r\n\t\thorizontalSpacing = 10;\r\n\t\tverticalSpacing = 10;\r\n\t\tfactory = new AShapeFactory(representation);\r\n\t}\r\n\r\n\t/********************* Concurrent Functions ********************************/\r\n\tpublic void changeAnimationPauseTime(int newTime) {\r\n\t\tanimationPauseTime = newTime;\r\n\t}\r\n\r\n\tpublic synchronized void waitForNextBufferThreadStep() {\r\n\t\ttry {\r\n\t\t\tthis.wait();\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synchronized void notifyVisualizer() {\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\tpublic synchronized void setCanProceed(boolean b) {\r\n\t\tcanProceed = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicWidth(boolean b) {\r\n\t\tdynamicWidth = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicHeight(boolean b) {\r\n\t\tdynamicHeight = b;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic synchronized boolean getCanProceed() {\r\n\t\treturn canProceed;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic int getAnimationPauseTime() {\r\n\t\treturn animationPauseTime;\r\n\t}\r\n\r\n\tpublic void setAnimationPauseTime(int newVal) {\r\n\t\tanimationPauseTime = newVal;\r\n\t}\r\n\r\n\t/******************* Graphics Options **************************/\r\n\r\n\tpublic void alignVertical(boolean b) {\r\n\t\talignVertical = b;\r\n\t}\r\n\r\n\tpublic boolean retrieveAlignment() {\r\n\t\treturn alignVertical;\r\n\t}\r\n\r\n\tpublic synchronized void visualize(ListenableVector vector) {\r\n\t\tListeningListenableVector buffer = new ABufferCollection(vector, this);\r\n\t\toriginalVectors.put(collectionIndex, vector);\r\n\t\tbuffer.addVectorMethodsListener(this);\r\n\r\n\t\t((Buffer) buffer).getUndoer().getCommands().addVectorMethodsListener(\r\n\t\t\t\t(Controller)getController());\r\n\t\tui = ((Buffer) buffer).getUndoer();\r\n\r\n\t\tvisualizeBuffer(buffer);\r\n\t\t((Buffer) buffer).putBufferThread(this, controller);\r\n\t}\r\n\r\n\tprivate synchronized void visualizeBuffer(ListenableVector vector) {\r\n\t\tbufferVectors.put(collectionIndex, (ABufferCollection) vector);\r\n\r\n\t\tadd(displayVector(vector, HashMapManipulator.key(bufferVectors, vector)));\r\n\t\tcollectionIndex++;\r\n\t}\r\n\r\n\tprotected abstract ListenableVector displayVector(ListenableVector vector,\r\n\t\t\tint colNum);\r\n\r\n\tprotected SimpleShape createShape(String string, int x, int y) {\r\n\t\tSimpleShape shape = factory.create();\r\n\t\tshape.setX(x);\r\n\t\tshape.setY(y);\r\n\r\n\t\ttry {\r\n\t\t\tdouble shapeStretchFactor = Double.parseDouble(string);\r\n\t\t\tshape.setWidth((int) (boxWidth * (dynamicWidth ? shapeStretchFactor\r\n\t\t\t\t\t: 1)));\r\n\t\t\tshape\r\n\t\t\t\t\t.setHeight((int) (boxHeight * (dynamicHeight ? shapeStretchFactor\r\n\t\t\t\t\t\t\t: 1)));\r\n\t\t} catch (Exception e) {\r\n\t\t\tshape.setWidth((int) (boxWidth));\r\n\t\t\tshape.setHeight((int) (boxHeight));\r\n\r\n\t\t}\r\n\r\n\t\tif (shape instanceof TextShape)\r\n\t\t\t((TextShape) shape).setText(string);\r\n\t\tif (shape instanceof LabelShape)\r\n\t\t\t((LabelShape) shape).setText(string);\r\n\r\n\t\treturn shape;\r\n\t}\r\n\r\n\t/*protected SimpleShape addModel(int index, Object arg1, int x, int y) {\r\n\t\tSimpleShape shape = createShape(arg1.toString(), x, y);\r\n\t\telementAt(index).add(shape);\r\n\t\treturn shape;\r\n\t}*/\r\n\r\n\t// This method moves an entire list of shapes to\r\n\t// (shapes.get(i).getX()+x,shapes.get(i).getY()+y)\r\n\tprotected synchronized void move(List<VisualizerElement> shapes, int x,\r\n\t\t\tint y) {\r\n\t\tmoveHorizontally(shapes, x);\r\n\t\tmoveVertically(shapes, y);\r\n\t}\r\n\r\n\t// This method moves one shape to the position (x,y)\r\n\tprotected synchronized void move(SimpleShape shape, int x, int y) {\r\n\t\tmoveHorizontally(shape, x);\r\n\t\tmoveVertically(shape, y);\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(List<VisualizerElement> shapes,\r\n\t\t\tint theY) {\r\n\t\tboolean positive = theY > 0;\r\n\t\ttry {\r\n\t\t\tint current_y_position = 0;\r\n\t\t\twhile (current_y_position != Math.abs(theY)) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveVertically(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveVertically(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_y_position += animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(\r\n\t\t\tList<VisualizerElement> shapes, int x) {\r\n\t\tboolean positive = x > 0;\r\n\t\ttry {\r\n\t\t\tint current_x_position = 0;\r\n\t\t\twhile (current_x_position != x) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveHorizontally(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveHorizontally(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_x_position = current_x_position + animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(SimpleShape model, int x) {\r\n\t\tboolean test = x > model.getX();\r\n\t\tint move = x - model.getX();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble newX = model.getX() + animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble newX = model.getX() - animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(SimpleShape model, int y) {\r\n\t\tboolean test = y > model.getY();\r\n\t\tint move = y - model.getY();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tThread.sleep(animationPauseTime);\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() + animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() - animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/************************** Access Methods ***************************************/\r\n\tpublic HashMap<Integer, ListenableVector<T>> retrieveOriginalVectors() {\r\n\t\treturn originalVectors;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic Control getController() {\r\n\t\treturn controller;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic UndoerInterface getUndoer() {\r\n\r\n\t\treturn ui;\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1319228651859
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1319228651874
error,log,,,"Error in JDT Core during reconcile",1319228651874
executed,command,org.eclipse.ui,3.5.2.M20100120-0800,"org.eclipse.ui.file.save",1319228654870
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.core.resources"".",1319228655447
error,log,,,"Exception occurred during problem detection:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage collection.visualizers;\r\n\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport common.HashMapManipulator;\r\n\r\nimport nodes.VisualizerElement;\r\n\r\nimport wdh.pgm.cv.iface.*;\r\n\r\nimport bus.uigen.shapes.LabelShape;\r\nimport bus.uigen.shapes.SimpleShape;\r\nimport bus.uigen.shapes.TextShape;\r\n\r\nimport shapes.AShapeFactory;\r\nimport shapes.ShapeFactory;\r\nimport util.models.AListenableVector;\r\nimport util.models.ListenableVector;\r\n\r\npublic abstract class ACollectionVisualizer<T> extends AListenableVector<G>\r\n\t\timplements CollectionVisualizer<T> {\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = 1701393485380127014L;\r\n\tprotected int internalIndex, collectionIndex;\r\n\tprotected int animationPauseTime, animationStep;\r\n\tprotected int boxWidth, boxHeight;\r\n\tprotected double magAmount;\r\n\tprotected boolean alignVertical, canProceed, dynamicWidth, dynamicHeight;\r\n\tprotected ListenableVector<T> input;\r\n\tprotected ShapeFactory factory;\r\n\tprotected HashMap<Integer, ListenableVector<T>> bufferVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected HashMap<Integer, ListenableVector<T>> originalVectors = new HashMap<Integer, ListenableVector<T>>();\r\n\tprotected int horizontalSpacing, verticalSpacing;\r\n\tprotected Control controller = new AController(this);\r\n\tprotected UndoerInterface ui;\r\n\r\n\t/********************* Constructor ********************************/\r\n\tprotected ACollectionVisualizer(SimpleShape representation) {\r\n\t\tanimationPauseTime = 5;\r\n\t\tanimationStep = 1;\r\n\t\tinternalIndex = 0;\r\n\t\tcollectionIndex = 0;\r\n\t\tmagAmount = 1;\r\n\t\tboxWidth = 100;\r\n\t\tboxHeight = 20;\r\n\t\thorizontalSpacing = 10;\r\n\t\tverticalSpacing = 10;\r\n\t\tfactory = new AShapeFactory(representation);\r\n\t}\r\n\r\n\t/********************* Concurrent Functions ********************************/\r\n\tpublic void changeAnimationPauseTime(int newTime) {\r\n\t\tanimationPauseTime = newTime;\r\n\t}\r\n\r\n\tpublic synchronized void waitForNextBufferThreadStep() {\r\n\t\ttry {\r\n\t\t\tthis.wait();\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic synchronized void notifyVisualizer() {\r\n\t\tthis.notify();\r\n\t}\r\n\r\n\tpublic synchronized void setCanProceed(boolean b) {\r\n\t\tcanProceed = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicWidth(boolean b) {\r\n\t\tdynamicWidth = b;\r\n\t}\r\n\r\n\tpublic synchronized void setDynamicHeight(boolean b) {\r\n\t\tdynamicHeight = b;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic synchronized boolean getCanProceed() {\r\n\t\treturn canProceed;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic int getAnimationPauseTime() {\r\n\t\treturn animationPauseTime;\r\n\t}\r\n\r\n\tpublic void setAnimationPauseTime(int newVal) {\r\n\t\tanimationPauseTime = newVal;\r\n\t}\r\n\r\n\t/******************* Graphics Options **************************/\r\n\r\n\tpublic void alignVertical(boolean b) {\r\n\t\talignVertical = b;\r\n\t}\r\n\r\n\tpublic boolean retrieveAlignment() {\r\n\t\treturn alignVertical;\r\n\t}\r\n\r\n\tpublic synchronized void visualize(ListenableVector vector) {\r\n\t\tListeningListenableVector buffer = new ABufferCollection(vector, this);\r\n\t\toriginalVectors.put(collectionIndex, vector);\r\n\t\tbuffer.addVectorMethodsListener(this);\r\n\r\n\t\t((Buffer) buffer).getUndoer().getCommands().addVectorMethodsListener(\r\n\t\t\t\t(Controller)getController());\r\n\t\tui = ((Buffer) buffer).getUndoer();\r\n\r\n\t\tvisualizeBuffer(buffer);\r\n\t\t((Buffer) buffer).putBufferThread(this, controller);\r\n\t}\r\n\r\n\tprivate synchronized void visualizeBuffer(ListenableVector vector) {\r\n\t\tbufferVectors.put(collectionIndex, (ABufferCollection) vector);\r\n\r\n\t\tadd(displayVector(vector, HashMapManipulator.key(bufferVectors, vector)));\r\n\t\tcollectionIndex++;\r\n\t}\r\n\r\n\tprotected abstract ListenableVector displayVector(ListenableVector vector,\r\n\t\t\tint colNum);\r\n\r\n\tprotected SimpleShape createShape(String string, int x, int y) {\r\n\t\tSimpleShape shape = factory.create();\r\n\t\tshape.setX(x);\r\n\t\tshape.setY(y);\r\n\r\n\t\ttry {\r\n\t\t\tdouble shapeStretchFactor = Double.parseDouble(string);\r\n\t\t\tshape.setWidth((int) (boxWidth * (dynamicWidth ? shapeStretchFactor\r\n\t\t\t\t\t: 1)));\r\n\t\t\tshape\r\n\t\t\t\t\t.setHeight((int) (boxHeight * (dynamicHeight ? shapeStretchFactor\r\n\t\t\t\t\t\t\t: 1)));\r\n\t\t} catch (Exception e) {\r\n\t\t\tshape.setWidth((int) (boxWidth));\r\n\t\t\tshape.setHeight((int) (boxHeight));\r\n\r\n\t\t}\r\n\r\n\t\tif (shape instanceof TextShape)\r\n\t\t\t((TextShape) shape).setText(string);\r\n\t\tif (shape instanceof LabelShape)\r\n\t\t\t((LabelShape) shape).setText(string);\r\n\r\n\t\treturn shape;\r\n\t}\r\n\r\n\t/*protected SimpleShape addModel(int index, Object arg1, int x, int y) {\r\n\t\tSimpleShape shape = createShape(arg1.toString(), x, y);\r\n\t\telementAt(index).add(shape);\r\n\t\treturn shape;\r\n\t}*/\r\n\r\n\t// This method moves an entire list of shapes to\r\n\t// (shapes.get(i).getX()+x,shapes.get(i).getY()+y)\r\n\tprotected synchronized void move(List<VisualizerElement> shapes, int x,\r\n\t\t\tint y) {\r\n\t\tmoveHorizontally(shapes, x);\r\n\t\tmoveVertically(shapes, y);\r\n\t}\r\n\r\n\t// This method moves one shape to the position (x,y)\r\n\tprotected synchronized void move(SimpleShape shape, int x, int y) {\r\n\t\tmoveHorizontally(shape, x);\r\n\t\tmoveVertically(shape, y);\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(List<VisualizerElement> shapes,\r\n\t\t\tint theY) {\r\n\t\tboolean positive = theY > 0;\r\n\t\ttry {\r\n\t\t\tint current_y_position = 0;\r\n\t\t\twhile (current_y_position != Math.abs(theY)) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveVertically(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveVertically(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_y_position += animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(\r\n\t\t\tList<VisualizerElement> shapes, int x) {\r\n\t\tboolean positive = x > 0;\r\n\t\ttry {\r\n\t\t\tint current_x_position = 0;\r\n\t\t\twhile (current_x_position != x) {\r\n\t\t\t\tfor (VisualizerElement element : shapes) {\r\n\t\t\t\t\tif (positive) {\r\n\t\t\t\t\t\telement.moveHorizontally(animationStep);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\telement.moveHorizontally(-animationStep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcurrent_x_position = current_x_position + animationStep;\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveHorizontally(SimpleShape model, int x) {\r\n\t\tboolean test = x > model.getX();\r\n\t\tint move = x - model.getX();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble newX = model.getX() + animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble newX = model.getX() - animationStep;\r\n\t\t\t\t\tdouble y = model.getY();\r\n\t\t\t\t\tmodel.setX((int) newX);\r\n\t\t\t\t\tmodel.setY((int) y);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected synchronized void moveVertically(SimpleShape model, int y) {\r\n\t\tboolean test = y > model.getY();\r\n\t\tint move = y - model.getY();\r\n\t\ttry {\r\n\t\t\tint count = 0;\r\n\t\t\twhile (count != move) {\r\n\t\t\t\tThread.sleep(animationPauseTime);\r\n\t\t\t\tif (test) {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() + animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count + animationStep;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdouble x = model.getX();\r\n\t\t\t\t\tdouble newY = model.getY() - animationStep;\r\n\t\t\t\t\tmodel.setX((int) x);\r\n\t\t\t\t\tmodel.setY((int) newY);\r\n\t\t\t\t\tcount = count - animationStep;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/************************** Access Methods ***************************************/\r\n\tpublic HashMap<Integer, ListenableVector<T>> retrieveOriginalVectors() {\r\n\t\treturn originalVectors;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic Control getController() {\r\n\t\treturn controller;\r\n\t}\r\n\r\n\t@util.annotations.Visible(false)\r\n\tpublic UndoerInterface getUndoer() {\r\n\r\n\t\treturn ui;\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1319228656008
